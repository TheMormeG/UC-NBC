import random
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tqdm import tqdm
from scipy.io import loadmat
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.cluster import KMeans
import warnings
import math
import scipy.stats as stats
import roman
from matplotlib.font_manager import FontProperties

warnings.filterwarnings('ignore')  # 忽略警告


def data_rolling(df, alpha, window_size=4):  # 按照窗口大小和步长对数据进行滚动
    df += alpha  # 拉普拉斯平滑系数
    df = df.rolling(window=window_size, min_periods=1).mean()  # 滚动平均
    return df


def classify_user(avg_rating, var_rating):
    global miu_list, var_list
    if avg_rating <= miu_list[1]:
        if var_rating <= var_list[1]:
            return 1
        elif var_rating <= var_list[2]:
            return 4
        else:
            return 7
    elif avg_rating <= miu_list[2]:
        if var_rating <= var_list[1]:
            return 2
        elif var_rating <= var_list[2]:
            return 5
        else:
            return 8
    else:
        if var_rating <= var_list[1]:
            return 3
        elif var_rating <= var_list[2]:
            return 6
        else:
            return 9


font_path = r'C:\Windows\Fonts\simsun.ttc'
chinese_font = FontProperties(fname=font_path, size=16)

plt.rcParams['font.family'] = 'serif'
plt.rcParams['font.serif'] = ['Times New Roman']  # 英文字体
plt.rcParams['axes.unicode_minus'] = False  # 正常显示负号
plt.rcParams['font.size'] = 12  # 全局默认字体大小


# 0.读取不同的数据集，包括movielens-100k、movielens-1m、ciao
dataset_name = 'ciao'  # 选择数据集 movielens_100k、ciao、movielens_1m
if dataset_name == 'movielens_100k':
    df = pd.read_csv(r'.\UC-NBC\movielens-100k\u.data', sep='\t', header=None, names=['user_id', 'item_id', 'rating', 'timestamp'])
elif dataset_name == 'movielens_1m':
    df = pd.read_csv(r'.\UC-NBC\movielens-1m\ratings.dat', sep='::', engine='python', header=None, names=['user_id', 'item_id', 'rating', 'timestamp'])
elif dataset_name == 'ciao':
    data = loadmat(r'.\UC-NBC\ciao_rating.mat')
    df = pd.DataFrame(data['rating'], columns=['user_id', 'item_id', 'cat_id', 'rating', 'helpfulness'])
    df = df[df['rating'] > 0]  # 剔除 rating 为 0 的情况
else:
    raise ValueError("未知数据集")


df_rating = df.copy()  # 选择movielens-100k数据集
if 'timestamp' in df_rating.columns:
    df_rating = df_rating.sort_values(by=['timestamp']).reindex()  # 按照时间戳升序排序
else:
    df_rating = df_rating.reindex()

df_rating = df_rating[['user_id', 'item_id', 'rating']]  # 去掉timestamp

df_rating['user_count'] = df_rating.groupby('user_id')['user_id'].transform('count')
df_rating['user_avg_rating'] = df_rating.groupby('user_id')['rating'].transform('mean')
df_rating['user_var_rating'] = df_rating.groupby('user_id')['rating'].transform('var')

df_rating['item_degree'] = df_rating.groupby('item_id')['item_id'].transform('count')
df_rating['item_avg_rating'] = df_rating.groupby('item_id')['rating'].transform('mean')
df_rating['rating_diff'] = round(df_rating['rating'] - df_rating['user_avg_rating'], 1)

miu_list = [1, 2.5, 4, 5]
var_list = [0, 1.5, 3.5, 5]

df_rating['user_cat'] = df_rating.apply(lambda row: classify_user(row['user_avg_rating'], row['user_var_rating']), axis=1)

bins_item_degree = np.round(np.arange(0, df_rating['item_degree'].max() + 5, 5), 0)
bins_item_avg_rating = np.round(np.arange(0, df_rating['item_avg_rating'].max() + 0.1, 0.1), 1)

# 再进行cut操作
df_rating['item_id_degree_cut'] = pd.cut(df_rating['item_degree'], bins=bins_item_degree)
df_rating['item_id_avg_r_cut'] = pd.cut(df_rating['item_avg_rating'], bins=bins_item_avg_rating)


# 5.预估diff的bar-plot
mean_ranges = [(miu_list[i] + miu_list[i + 1]) / 2 for i in range(len(miu_list) - 1)]
variance_ranges = [(var_list[i] + var_list[i + 1]) / 2 for i in range(len(var_list) - 1)]

mean_ranges *= len(variance_ranges)
variance_ranges = [val for val in variance_ranges for _ in range(len(mean_ranges) // len(variance_ranges))]

fig, ax_main = plt.subplots(figsize=(10, 6))

colors = plt.cm.tab10(np.linspace(0, 1, len(mean_ranges)))  # 使用tab10色图生成不同颜色

for i, (mu, sigma_sq) in enumerate(zip(mean_ranges, variance_ranges), 1):
    sigma = math.sqrt(sigma_sq)

    x = np.linspace(mu - 4 * sigma, mu + 4 * sigma, 1000)
    x = np.where(x < 1, 1, x)
    x = np.where(x > 5, 5, x)

    pdf = (1 / (np.sqrt(2 * np.pi * sigma ** 2))) * np.exp(-((x - mu) ** 2) / (2 * sigma ** 2))

    cdf_1 = stats.norm.cdf(1, mu, sigma)
    cdf_5 = 1 - stats.norm.cdf(5, mu, sigma)

    pdf_adjusted = pdf.copy()
    pdf_adjusted[x == 1] += cdf_1
    pdf_adjusted[x == 5] += cdf_5

    x_adjusted = np.round(x - mu, 1)

    mask = (x_adjusted >= -1.96 * sigma) & (x_adjusted <= 1.96 * sigma)
    x_95 = x_adjusted[mask]
    pdf_95 = pdf_adjusted[mask]

    unique_x = np.unique(x_95)
    unique_pdf = np.array([pdf_95[x_95 == ux].mean() for ux in unique_x])

    ax_main.plot(unique_x, unique_pdf, marker='*', alpha=0.7,
                 label=f'{roman.toRoman(i)}', color=colors[i - 1])

ax_main.set_xlabel('x - $\mu$')
ax_main.set_ylabel('概率密度', fontproperties=chinese_font)
ax_main.legend()

# 创建小窗并绘制指定线条
inset_indices = [3, 4, 6, 7, 9]
fig.subplots_adjust(right=0.75)
inset_axes = [fig.add_axes([0.78, 0.8 - 0.19 * j, 0.18, 0.15]) for j in range(len(inset_indices))]


for j, inset_idx in enumerate(inset_indices):
    ax_inset = inset_axes[j]

    mu = mean_ranges[inset_idx - 1]
    sigma_sq = variance_ranges[inset_idx - 1]
    sigma = math.sqrt(sigma_sq)

    x = np.linspace(mu - 4 * sigma, mu + 4 * sigma, 1000)
    x = np.where(x < 1, 1, x)
    x = np.where(x > 5, 5, x)

    pdf = (1 / (np.sqrt(2 * np.pi * sigma ** 2))) * np.exp(-((x - mu) ** 2) / (2 * sigma ** 2))

    cdf_1 = stats.norm.cdf(1, mu, sigma)
    cdf_5 = 1 - stats.norm.cdf(5, mu, sigma)

    pdf_adjusted = pdf.copy()
    pdf_adjusted[x == 1] += cdf_1
    pdf_adjusted[x == 5] += cdf_5

    x_adjusted = np.round(x - mu, 1)

    mask = (x_adjusted >= -1.96 * sigma) & (x_adjusted <= 1.96 * sigma)
    x_95 = x_adjusted[mask]
    pdf_95 = pdf_adjusted[mask]

    unique_x = np.unique(x_95)
    unique_pdf = np.array([pdf_95[x_95 == ux].mean() for ux in unique_x])

    ax_inset.plot(unique_x, unique_pdf, alpha=0.7, color=colors[inset_idx - 1])
    ax_inset.legend([f'{roman.toRoman(inset_idx)}'])
    ax_inset.set_xticks([])
    ax_inset.set_yticks([])
    ax_inset.set_xlim(-3, 3)
    ax_inset.set_ylim(0, 0.7)
plt.show()



# 6.1 λ灵敏度分析
# 数据准备
data = {
    'ciao': [
        (0, 0.6932), (0.02, 0.6931),  (0.04, 0.6927),
        (0.06, 0.6922),  (0.08, 0.6918), (0.1, 0.6916),
        (0.12, 0.692),  (0.14, 0.6919),  (0.16, 0.692),
        (0.18, 0.6922),  (0.2, 0.6922), (0.3, 0.693), (0.4, 0.6944), (0.5, 0.6972),
        (0.6, 0.7003), (0.7, 0.7048), (0.8, 0.7116), (0.9, 0.7244), (1, 0.7576)
    ],
    'movielens 100k': [
        (0, 0.7442), (0.1, 0.7428), (0.2, 0.7413), (0.3, 0.7399), (0.4, 0.7382), (0.5, 0.7365),
        (0.6, 0.7347),  (0.62, 0.7346),  (0.64, 0.7336),
        (0.66, 0.733),  (0.68, 0.733),  (0.7, 0.7324),
        (0.72, 0.7319),  (0.74, 0.7324),  (0.76, 0.7333),
        (0.78, 0.7347),  (0.8, 0.7347), (0.9, 0.7451), (1, 0.7885)
    ]
}

# 转换数据为DataFrame
ciao_df = pd.DataFrame(data['ciao'], columns=['lambda', 'mae'])
movielens_df = pd.DataFrame(data['movielens 100k'], columns=['lambda', 'mae'])

# 绘制折线图
plt.figure(figsize=(7, 6))
plt.plot(ciao_df['lambda'], ciao_df['mae'], label='Ciao', marker='.')
plt.plot(movielens_df['lambda'], movielens_df['mae'], label='Movielens 100k', marker='.')
plt.text(0.77, 0.789, '$r_α=3.5,r_β=4.2$', fontsize=12)
# 图表标签和标题
plt.xlabel('$\lambda$')
plt.ylabel('MAE')
plt.legend()
plt.grid(False)

# 显示图表
plt.show()

# 6.2 r_alpha和r_beta分析
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from scipy.interpolate import griddata

r1 = np.array(['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
               '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
               '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
               '1', '1.1', '1.1', '1.1', '1.1', '1.1', '1.1', '1.1', '1.1', '1.1',
               '1.1', '1.1', '1.1', '1.1', '1.1', '1.1', '1.1', '1.1', '1.1',
               '1.1', '1.1', '1.1', '1.1', '1.1', '1.1', '1.1', '1.1', '1.1',
               '1.1', '1.1', '1.1', '1.1', '1.1', '1.1', '1.1', '1.1', '1.1',
               '1.1', '1.1', '1.1', '1.2', '1.2', '1.2', '1.2', '1.2', '1.2',
               '1.2', '1.2', '1.2', '1.2', '1.2', '1.2', '1.2', '1.2', '1.2',
               '1.2', '1.2', '1.2', '1.2', '1.2', '1.2', '1.2', '1.2', '1.2',
               '1.2', '1.2', '1.2', '1.2', '1.2', '1.2', '1.2', '1.2', '1.2',
               '1.2', '1.2', '1.2', '1.2', '1.2', '1.3', '1.3', '1.3', '1.3',
               '1.3', '1.3', '1.3', '1.3', '1.3', '1.3', '1.3', '1.3', '1.3',
               '1.3', '1.3', '1.3', '1.3', '1.3', '1.3', '1.3', '1.3', '1.3',
               '1.3', '1.3', '1.3', '1.3', '1.3', '1.3', '1.3', '1.3', '1.3',
               '1.3', '1.3', '1.3', '1.3', '1.3', '1.3', '1.4', '1.4', '1.4',
               '1.4', '1.4', '1.4', '1.4', '1.4', '1.4', '1.4', '1.4', '1.4',
               '1.4', '1.4', '1.4', '1.4', '1.4', '1.4', '1.4', '1.4', '1.4',
               '1.4', '1.4', '1.4', '1.4', '1.4', '1.4', '1.4', '1.4', '1.4',
               '1.4', '1.4', '1.4', '1.4', '1.4', '1.4', '1.5', '1.5', '1.5',
               '1.5', '1.5', '1.5', '1.5', '1.5', '1.5', '1.5', '1.5', '1.5',
               '1.5', '1.5', '1.5', '1.5', '1.5', '1.5', '1.5', '1.5', '1.5',
               '1.5', '1.5', '1.5', '1.5', '1.5', '1.5', '1.5', '1.5', '1.5',
               '1.5', '1.5', '1.5', '1.5', '1.5', '1.6', '1.6', '1.6', '1.6',
               '1.6', '1.6', '1.6', '1.6', '1.6', '1.6', '1.6', '1.6', '1.6',
               '1.6', '1.6', '1.6', '1.6', '1.6', '1.6', '1.6', '1.6', '1.6',
               '1.6', '1.6', '1.6', '1.6', '1.6', '1.6', '1.6', '1.6', '1.6',
               '1.6', '1.6', '1.6', '1.7', '1.7', '1.7', '1.7', '1.7', '1.7',
               '1.7', '1.7', '1.7', '1.7', '1.7', '1.7', '1.7', '1.7', '1.7',
               '1.7', '1.7', '1.7', '1.7', '1.7', '1.7', '1.7', '1.7', '1.7',
               '1.7', '1.7', '1.7', '1.7', '1.7', '1.7', '1.7', '1.7', '1.7',
               '1.8', '1.8', '1.8', '1.8', '1.8', '1.8', '1.8', '1.8', '1.8',
               '1.8', '1.8', '1.8', '1.8', '1.8', '1.8', '1.8', '1.8', '1.8',
               '1.8', '1.8', '1.8', '1.8', '1.8', '1.8', '1.8', '1.8', '1.8',
               '1.8', '1.8', '1.8', '1.8', '1.8', '1.9', '1.9', '1.9', '1.9',
               '1.9', '1.9', '1.9', '1.9', '1.9', '1.9', '1.9', '1.9', '1.9',
               '1.9', '1.9', '1.9', '1.9', '1.9', '1.9', '1.9', '1.9', '1.9',
               '1.9', '1.9', '1.9', '1.9', '1.9', '1.9', '1.9', '1.9', '1.9', '2',
               '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2',
               '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2',
               '2', '2', '2', '2.1', '2.1', '2.1', '2.1', '2.1', '2.1', '2.1',
               '2.1', '2.1', '2.1', '2.1', '2.1', '2.1', '2.1', '2.1', '2.1',
               '2.1', '2.1', '2.1', '2.1', '2.1', '2.1', '2.1', '2.1', '2.1',
               '2.1', '2.1', '2.1', '2.1', '2.2', '2.2', '2.2', '2.2', '2.2',
               '2.2', '2.2', '2.2', '2.2', '2.2', '2.2', '2.2', '2.2', '2.2',
               '2.2', '2.2', '2.2', '2.2', '2.2', '2.2', '2.2', '2.2', '2.2',
               '2.2', '2.2', '2.2', '2.2', '2.2', '2.3', '2.3', '2.3', '2.3',
               '2.3', '2.3', '2.3', '2.3', '2.3', '2.3', '2.3', '2.3', '2.3',
               '2.3', '2.3', '2.3', '2.3', '2.3', '2.3', '2.3', '2.3', '2.3',
               '2.3', '2.3', '2.3', '2.3', '2.3', '2.4', '2.4', '2.4', '2.4',
               '2.4', '2.4', '2.4', '2.4', '2.4', '2.4', '2.4', '2.4', '2.4',
               '2.4', '2.4', '2.4', '2.4', '2.4', '2.4', '2.4', '2.4', '2.4',
               '2.4', '2.4', '2.4', '2.4', '2.5', '2.5', '2.5', '2.5', '2.5',
               '2.5', '2.5', '2.5', '2.5', '2.5', '2.5', '2.5', '2.5', '2.5',
               '2.5', '2.5', '2.5', '2.5', '2.5', '2.5', '2.5', '2.5', '2.5',
               '2.5', '2.5', '2.6', '2.6', '2.6', '2.6', '2.6', '2.6', '2.6',
               '2.6', '2.6', '2.6', '2.6', '2.6', '2.6', '2.6', '2.6', '2.6',
               '2.6', '2.6', '2.6', '2.6', '2.6', '2.6', '2.6', '2.6', '2.7',
               '2.7', '2.7', '2.7', '2.7', '2.7', '2.7', '2.7', '2.7', '2.7',
               '2.7', '2.7', '2.7', '2.7', '2.7', '2.7', '2.7', '2.7', '2.7',
               '2.7', '2.7', '2.7', '2.7', '2.8', '2.8', '2.8', '2.8', '2.8',
               '2.8', '2.8', '2.8', '2.8', '2.8', '2.8', '2.8', '2.8', '2.8',
               '2.8', '2.8', '2.8', '2.8', '2.8', '2.8', '2.8', '2.8', '2.9',
               '2.9', '2.9', '2.9', '2.9', '2.9', '2.9', '2.9', '2.9', '2.9',
               '2.9', '2.9', '2.9', '2.9', '2.9', '2.9', '2.9', '2.9', '2.9',
               '2.9', '2.9', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3',
               '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3.1', '3.1',
               '3.1', '3.1', '3.1', '3.1', '3.1', '3.1', '3.1', '3.1', '3.1',
               '3.1', '3.1', '3.1', '3.1', '3.1', '3.1', '3.1', '3.1', '3.2',
               '3.2', '3.2', '3.2', '3.2', '3.2', '3.2', '3.2', '3.2', '3.2',
               '3.2', '3.2', '3.2', '3.2', '3.2', '3.2', '3.2', '3.2', '3.3',
               '3.3', '3.3', '3.3', '3.3', '3.3', '3.3', '3.3', '3.3', '3.3',
               '3.3', '3.3', '3.3', '3.3', '3.3', '3.3', '3.3', '3.4', '3.4',
               '3.4', '3.4', '3.4', '3.4', '3.4', '3.4', '3.4', '3.4', '3.4',
               '3.4', '3.4', '3.4', '3.4', '3.4', '3.5', '3.5', '3.5', '3.5',
               '3.5', '3.5', '3.5', '3.5', '3.5', '3.5', '3.5', '3.5', '3.5',
               '3.5', '3.5', '3.6', '3.6', '3.6', '3.6', '3.6', '3.6', '3.6',
               '3.6', '3.6', '3.6', '3.6', '3.6', '3.6', '3.6', '3.7', '3.7',
               '3.7', '3.7', '3.7', '3.7', '3.7', '3.7', '3.7', '3.7', '3.7',
               '3.7', '3.7', '3.8', '3.8', '3.8', '3.8', '3.8', '3.8', '3.8',
               '3.8', '3.8', '3.8', '3.8', '3.8', '3.9', '3.9', '3.9', '3.9',
               '3.9', '3.9', '3.9', '3.9', '3.9', '3.9', '3.9', '4', '4', '4',
               '4', '4', '4', '4', '4', '4', '4', '4.1', '4.1', '4.1', '4.1',
               '4.1', '4.1', '4.1', '4.1', '4.1', '4.2', '4.2', '4.2', '4.2',
               '4.2', '4.2', '4.2', '4.2', '4.3', '4.3', '4.3', '4.3', '4.3',
               '4.3', '4.3', '4.4', '4.4', '4.4', '4.4', '4.4', '4.4', '4.5',
               '4.5', '4.5', '4.5', '4.5', '4.6', '4.6', '4.6', '4.6', '4.7',
               '4.7', '4.7', '4.8', '4.8', '4.9'], dtype=np.float32)
r2 = np.array(['1.1', '1.2', '1.3', '1.4', '1.5', '1.6', '1.7', '1.8', '1.9', '2',
               '2.1', '2.2', '2.3', '2.4', '2.5', '2.6', '2.7', '2.8', '2.9', '3',
               '3.1', '3.2', '3.3', '3.4', '3.5', '3.6', '3.7', '3.8', '3.9', '4',
               '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5',
               '1.2', '1.3', '1.4', '1.5', '1.6', '1.7', '1.8', '1.9', '2', '2.1',
               '2.2', '2.3', '2.4', '2.5', '2.6', '2.7', '2.8', '2.9', '3', '3.1',
               '3.2', '3.3', '3.4', '3.5', '3.6', '3.7', '3.8', '3.9', '4', '4.1',
               '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5', '1.3',
               '1.4', '1.5', '1.6', '1.7', '1.8', '1.9', '2', '2.1', '2.2', '2.3',
               '2.4', '2.5', '2.6', '2.7', '2.8', '2.9', '3', '3.1', '3.2', '3.3',
               '3.4', '3.5', '3.6', '3.7', '3.8', '3.9', '4', '4.1', '4.2', '4.3',
               '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5', '1.4', '1.5', '1.6',
               '1.7', '1.8', '1.9', '2', '2.1', '2.2', '2.3', '2.4', '2.5', '2.6',
               '2.7', '2.8', '2.9', '3', '3.1', '3.2', '3.3', '3.4', '3.5', '3.6',
               '3.7', '3.8', '3.9', '4', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6',
               '4.7', '4.8', '4.9', '5', '1.5', '1.6', '1.7', '1.8', '1.9', '2',
               '2.1', '2.2', '2.3', '2.4', '2.5', '2.6', '2.7', '2.8', '2.9', '3',
               '3.1', '3.2', '3.3', '3.4', '3.5', '3.6', '3.7', '3.8', '3.9', '4',
               '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5',
               '1.6', '1.7', '1.8', '1.9', '2', '2.1', '2.2', '2.3', '2.4', '2.5',
               '2.6', '2.7', '2.8', '2.9', '3', '3.1', '3.2', '3.3', '3.4', '3.5',
               '3.6', '3.7', '3.8', '3.9', '4', '4.1', '4.2', '4.3', '4.4', '4.5',
               '4.6', '4.7', '4.8', '4.9', '5', '1.7', '1.8', '1.9', '2', '2.1',
               '2.2', '2.3', '2.4', '2.5', '2.6', '2.7', '2.8', '2.9', '3', '3.1',
               '3.2', '3.3', '3.4', '3.5', '3.6', '3.7', '3.8', '3.9', '4', '4.1',
               '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5', '1.8',
               '1.9', '2', '2.1', '2.2', '2.3', '2.4', '2.5', '2.6', '2.7', '2.8',
               '2.9', '3', '3.1', '3.2', '3.3', '3.4', '3.5', '3.6', '3.7', '3.8',
               '3.9', '4', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8',
               '4.9', '5', '1.9', '2', '2.1', '2.2', '2.3', '2.4', '2.5', '2.6',
               '2.7', '2.8', '2.9', '3', '3.1', '3.2', '3.3', '3.4', '3.5', '3.6',
               '3.7', '3.8', '3.9', '4', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6',
               '4.7', '4.8', '4.9', '5', '2', '2.1', '2.2', '2.3', '2.4', '2.5',
               '2.6', '2.7', '2.8', '2.9', '3', '3.1', '3.2', '3.3', '3.4', '3.5',
               '3.6', '3.7', '3.8', '3.9', '4', '4.1', '4.2', '4.3', '4.4', '4.5',
               '4.6', '4.7', '4.8', '4.9', '5', '2.1', '2.2', '2.3', '2.4', '2.5',
               '2.6', '2.7', '2.8', '2.9', '3', '3.1', '3.2', '3.3', '3.4', '3.5',
               '3.6', '3.7', '3.8', '3.9', '4', '4.1', '4.2', '4.3', '4.4', '4.5',
               '4.6', '4.7', '4.8', '4.9', '5', '2.2', '2.3', '2.4', '2.5', '2.6',
               '2.7', '2.8', '2.9', '3', '3.1', '3.2', '3.3', '3.4', '3.5', '3.6',
               '3.7', '3.8', '3.9', '4', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6',
               '4.7', '4.8', '4.9', '5', '2.3', '2.4', '2.5', '2.6', '2.7', '2.8',
               '2.9', '3', '3.1', '3.2', '3.3', '3.4', '3.5', '3.6', '3.7', '3.8',
               '3.9', '4', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8',
               '4.9', '5', '2.4', '2.5', '2.6', '2.7', '2.8', '2.9', '3', '3.1',
               '3.2', '3.3', '3.4', '3.5', '3.6', '3.7', '3.8', '3.9', '4', '4.1',
               '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5', '2.5',
               '2.6', '2.7', '2.8', '2.9', '3', '3.1', '3.2', '3.3', '3.4', '3.5',
               '3.6', '3.7', '3.8', '3.9', '4', '4.1', '4.2', '4.3', '4.4', '4.5',
               '4.6', '4.7', '4.8', '4.9', '5', '2.6', '2.7', '2.8', '2.9', '3',
               '3.1', '3.2', '3.3', '3.4', '3.5', '3.6', '3.7', '3.8', '3.9', '4',
               '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5',
               '2.7', '2.8', '2.9', '3', '3.1', '3.2', '3.3', '3.4', '3.5', '3.6',
               '3.7', '3.8', '3.9', '4', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6',
               '4.7', '4.8', '4.9', '5', '2.8', '2.9', '3', '3.1', '3.2', '3.3',
               '3.4', '3.5', '3.6', '3.7', '3.8', '3.9', '4', '4.1', '4.2', '4.3',
               '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5', '2.9', '3', '3.1',
               '3.2', '3.3', '3.4', '3.5', '3.6', '3.7', '3.8', '3.9', '4', '4.1',
               '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5', '3',
               '3.1', '3.2', '3.3', '3.4', '3.5', '3.6', '3.7', '3.8', '3.9', '4',
               '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5',
               '3.1', '3.2', '3.3', '3.4', '3.5', '3.6', '3.7', '3.8', '3.9', '4',
               '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5',
               '3.2', '3.3', '3.4', '3.5', '3.6', '3.7', '3.8', '3.9', '4', '4.1',
               '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5', '3.3',
               '3.4', '3.5', '3.6', '3.7', '3.8', '3.9', '4', '4.1', '4.2', '4.3',
               '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5', '3.4', '3.5', '3.6',
               '3.7', '3.8', '3.9', '4', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6',
               '4.7', '4.8', '4.9', '5', '3.5', '3.6', '3.7', '3.8', '3.9', '4',
               '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5',
               '3.6', '3.7', '3.8', '3.9', '4', '4.1', '4.2', '4.3', '4.4', '4.5',
               '4.6', '4.7', '4.8', '4.9', '5', '3.7', '3.8', '3.9', '4', '4.1',
               '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5', '3.8',
               '3.9', '4', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8',
               '4.9', '5', '3.9', '4', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6',
               '4.7', '4.8', '4.9', '5', '4', '4.1', '4.2', '4.3', '4.4', '4.5',
               '4.6', '4.7', '4.8', '4.9', '5', '4.1', '4.2', '4.3', '4.4', '4.5',
               '4.6', '4.7', '4.8', '4.9', '5', '4.2', '4.3', '4.4', '4.5', '4.6',
               '4.7', '4.8', '4.9', '5', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8',
               '4.9', '5', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5', '4.5',
               '4.6', '4.7', '4.8', '4.9', '5', '4.6', '4.7', '4.8', '4.9', '5',
               '4.7', '4.8', '4.9', '5', '4.8', '4.9', '5', '4.9', '5', '5'], dtype=np.float32)
mae_ciao = np.array(['0.6927', '0.6928', '0.693', '0.693', '0.693', '0.6933', '0.6933',
                     '0.6935', '0.6936', '0.6936', '0.6919', '0.6919', '0.6917',
                     '0.6918', '0.6919', '0.6922', '0.6925', '0.6927', '0.6931',
                     '0.6931', '0.6926', '0.6927', '0.6929', '0.6931', '0.6936',
                     '0.6936', '0.6936', '0.6941', '0.6958', '0.6962', '0.6958',
                     '0.6952', '0.6954', '0.695', '0.6949', '0.6951', '0.6948',
                     '0.6946', '0.6945', '0.6946', '0.6928', '0.693', '0.693', '0.693',
                     '0.6933', '0.6933', '0.6935', '0.6936', '0.6936', '0.6919',
                     '0.6919', '0.6917', '0.6918', '0.6919', '0.6922', '0.6925',
                     '0.6927', '0.6931', '0.6931', '0.6926', '0.6927', '0.6929',
                     '0.6931', '0.6936', '0.6936', '0.6936', '0.6941', '0.6958',
                     '0.6962', '0.6958', '0.6952', '0.6954', '0.695', '0.6949',
                     '0.6951', '0.6948', '0.6946', '0.6945', '0.6946', '0.6927',
                     '0.6927', '0.6928', '0.6931', '0.6931', '0.6931', '0.6932',
                     '0.6932', '0.6916', '0.6916', '0.6915', '0.6916', '0.6917',
                     '0.692', '0.6923', '0.6925', '0.6929', '0.6929', '0.6924',
                     '0.6925', '0.6926', '0.6928', '0.6933', '0.6932', '0.6933',
                     '0.6939', '0.6956', '0.696', '0.6956', '0.695', '0.6951', '0.6948',
                     '0.6947', '0.6949', '0.6945', '0.6944', '0.6943', '0.6943',
                     '0.6927', '0.6928', '0.6931', '0.6931', '0.6931', '0.6932',
                     '0.6916', '0.6916', '0.6916', '0.6915', '0.6916', '0.6917',
                     '0.692', '0.6923', '0.6925', '0.6929', '0.6929', '0.6924',
                     '0.6925', '0.6926', '0.6928', '0.6933', '0.6932', '0.6933',
                     '0.6939', '0.6956', '0.696', '0.6956', '0.695', '0.6951', '0.6948',
                     '0.6947', '0.6949', '0.6945', '0.6944', '0.6943', '0.6943',
                     '0.6928', '0.6931', '0.6931', '0.6931', '0.6932', '0.6932',
                     '0.6916', '0.6916', '0.6915', '0.6916', '0.6917', '0.692',
                     '0.6923', '0.6925', '0.6929', '0.6929', '0.6924', '0.6925',
                     '0.6926', '0.6928', '0.6933', '0.6932', '0.6933', '0.6939',
                     '0.6956', '0.696', '0.6956', '0.695', '0.6951', '0.6948', '0.6947',
                     '0.6949', '0.6945', '0.6944', '0.6943', '0.6943', '0.693',
                     '0.6931', '0.6931', '0.6932', '0.6932', '0.6916', '0.6916',
                     '0.6915', '0.6916', '0.6916', '0.6919', '0.6923', '0.6924',
                     '0.6929', '0.6928', '0.6923', '0.6925', '0.6926', '0.6928',
                     '0.6933', '0.6932', '0.6933', '0.6939', '0.6955', '0.696',
                     '0.6956', '0.695', '0.6951', '0.6948', '0.6947', '0.6949',
                     '0.6945', '0.6943', '0.6942', '0.6943', '0.6928', '0.6928',
                     '0.6929', '0.6929', '0.6913', '0.6913', '0.6912', '0.6913',
                     '0.6913', '0.6916', '0.692', '0.6921', '0.6926', '0.6925', '0.692',
                     '0.6922', '0.6923', '0.6925', '0.693', '0.6929', '0.693', '0.6936',
                     '0.6952', '0.6957', '0.6953', '0.6947', '0.6948', '0.6945',
                     '0.6944', '0.6946', '0.6942', '0.694', '0.6939', '0.694', '0.6928',
                     '0.6929', '0.6929', '0.6912', '0.6913', '0.6911', '0.6912',
                     '0.6913', '0.6916', '0.6919', '0.6921', '0.6925', '0.6925',
                     '0.692', '0.6921', '0.6923', '0.6925', '0.6929', '0.6928',
                     '0.6929', '0.6935', '0.6952', '0.6956', '0.6952', '0.6946',
                     '0.6948', '0.6944', '0.6943', '0.6945', '0.6942', '0.694',
                     '0.6939', '0.694', '0.6928', '0.6928', '0.6912', '0.6912',
                     '0.6911', '0.6912', '0.6912', '0.6916', '0.6919', '0.6921',
                     '0.6925', '0.6925', '0.692', '0.6921', '0.6922', '0.6924',
                     '0.6929', '0.6928', '0.6929', '0.6935', '0.6952', '0.6956',
                     '0.6952', '0.6946', '0.6947', '0.6944', '0.6943', '0.6945',
                     '0.6941', '0.694', '0.6938', '0.6939', '0.6927', '0.6911',
                     '0.6911', '0.691', '0.6911', '0.6911', '0.6915', '0.6918',
                     '0.6919', '0.6924', '0.6924', '0.6919', '0.692', '0.6921',
                     '0.6923', '0.6928', '0.6927', '0.6928', '0.6933', '0.6951',
                     '0.6955', '0.6951', '0.6945', '0.6946', '0.6943', '0.6942',
                     '0.6944', '0.694', '0.6938', '0.6937', '0.6938', '0.6927',
                     '0.6927', '0.6925', '0.6927', '0.6927', '0.693', '0.6935',
                     '0.6936', '0.6941', '0.694', '0.6935', '0.6937', '0.6938', '0.694',
                     '0.6945', '0.6944', '0.6944', '0.695', '0.6966', '0.697', '0.6967',
                     '0.6961', '0.6962', '0.6958', '0.6957', '0.6959', '0.6956',
                     '0.6954', '0.6953', '0.6954', '0.6927', '0.6926', '0.6927',
                     '0.6928', '0.6931', '0.6935', '0.6937', '0.6941', '0.6941',
                     '0.6936', '0.6937', '0.6938', '0.6941', '0.6945', '0.6944',
                     '0.6945', '0.695', '0.6967', '0.6971', '0.6967', '0.6961',
                     '0.6962', '0.6959', '0.6958', '0.696', '0.6956', '0.6955',
                     '0.6954', '0.6954', '0.6926', '0.6927', '0.6927', '0.6931',
                     '0.6935', '0.6936', '0.6941', '0.6941', '0.6936', '0.6937',
                     '0.6938', '0.694', '0.6945', '0.6944', '0.6945', '0.695', '0.6967',
                     '0.6971', '0.6967', '0.6961', '0.6962', '0.6959', '0.6958',
                     '0.696', '0.6956', '0.6954', '0.6953', '0.6954', '0.6928',
                     '0.6929', '0.6932', '0.6936', '0.6938', '0.6942', '0.6942',
                     '0.6937', '0.6938', '0.694', '0.6942', '0.6946', '0.6945',
                     '0.6946', '0.6951', '0.6968', '0.6972', '0.6968', '0.6962',
                     '0.6964', '0.696', '0.6959', '0.6961', '0.6958', '0.6956',
                     '0.6955', '0.6956', '0.6927', '0.693', '0.6935', '0.6936',
                     '0.6941', '0.694', '0.6935', '0.6937', '0.6938', '0.694', '0.6945',
                     '0.6944', '0.6944', '0.695', '0.6966', '0.697', '0.6967', '0.6961',
                     '0.6962', '0.6959', '0.6957', '0.696', '0.6956', '0.6954',
                     '0.6953', '0.6954', '0.6929', '0.6932', '0.6935', '0.6939',
                     '0.6939', '0.6933', '0.6935', '0.6936', '0.6939', '0.6943',
                     '0.6942', '0.6943', '0.6948', '0.6965', '0.6969', '0.6965',
                     '0.6959', '0.6961', '0.6957', '0.6956', '0.6958', '0.6954',
                     '0.6953', '0.6952', '0.6953', '0.6929', '0.6931', '0.6936',
                     '0.6936', '0.693', '0.6931', '0.6932', '0.6936', '0.694', '0.6939',
                     '0.694', '0.6945', '0.6962', '0.6966', '0.6962', '0.6956',
                     '0.6957', '0.6954', '0.6953', '0.6955', '0.6951', '0.695',
                     '0.6949', '0.6949', '0.6929', '0.6933', '0.6933', '0.6928',
                     '0.6929', '0.693', '0.6933', '0.6938', '0.6937', '0.6938',
                     '0.6943', '0.696', '0.6964', '0.696', '0.6954', '0.6956', '0.6952',
                     '0.6951', '0.6953', '0.6949', '0.6948', '0.6947', '0.6947',
                     '0.6929', '0.6929', '0.6924', '0.6925', '0.6927', '0.6929',
                     '0.6933', '0.6932', '0.6933', '0.6939', '0.6956', '0.696',
                     '0.6956', '0.695', '0.6952', '0.6948', '0.6947', '0.6949',
                     '0.6945', '0.6944', '0.6943', '0.6944', '0.6927', '0.6922',
                     '0.6923', '0.6924', '0.6927', '0.6931', '0.693', '0.6931',
                     '0.6937', '0.6954', '0.6958', '0.6954', '0.6948', '0.695',
                     '0.6946', '0.6945', '0.6947', '0.6943', '0.6942', '0.6941',
                     '0.6941', '0.6928', '0.6929', '0.693', '0.6932', '0.6938',
                     '0.6937', '0.6938', '0.6943', '0.696', '0.6964', '0.696', '0.6954',
                     '0.6955', '0.6952', '0.6951', '0.6953', '0.6949', '0.6947',
                     '0.6946', '0.6947', '0.6929', '0.693', '0.6932', '0.6938',
                     '0.6937', '0.6938', '0.6943', '0.696', '0.6964', '0.696', '0.6954',
                     '0.6955', '0.6952', '0.6951', '0.6953', '0.6949', '0.6947',
                     '0.6946', '0.6947', '0.6928', '0.693', '0.6936', '0.6935',
                     '0.6936', '0.6941', '0.6958', '0.6962', '0.6958', '0.6952',
                     '0.6953', '0.695', '0.6949', '0.6951', '0.6947', '0.6946',
                     '0.6944', '0.6945', '0.6929', '0.6935', '0.6933', '0.6935',
                     '0.694', '0.6957', '0.6961', '0.6957', '0.6951', '0.6952',
                     '0.6949', '0.6948', '0.695', '0.6946', '0.6944', '0.6943',
                     '0.6944', '0.693', '0.6929', '0.6929', '0.6936', '0.6952',
                     '0.6956', '0.6953', '0.6946', '0.6948', '0.6944', '0.6943',
                     '0.6945', '0.6942', '0.694', '0.6939', '0.694', '0.6927', '0.6928',
                     '0.6933', '0.6951', '0.6955', '0.6951', '0.6945', '0.6946',
                     '0.6943', '0.6942', '0.6944', '0.694', '0.6938', '0.6937',
                     '0.6938', '0.6927', '0.6932', '0.695', '0.6954', '0.695', '0.6944',
                     '0.6946', '0.6942', '0.6941', '0.6943', '0.6939', '0.6938',
                     '0.6937', '0.6938', '0.6932', '0.695', '0.6954', '0.695', '0.6944',
                     '0.6945', '0.6942', '0.6941', '0.6943', '0.6939', '0.6937',
                     '0.6936', '0.6937', '0.6944', '0.6948', '0.6944', '0.6938',
                     '0.6939', '0.6936', '0.6935', '0.6937', '0.6932', '0.693',
                     '0.6929', '0.693', '0.6932', '0.6928', '0.6922', '0.6923', '0.692',
                     '0.6919', '0.6921', '0.6917', '0.6915', '0.6914', '0.6915',
                     '0.6929', '0.6923', '0.6924', '0.6921', '0.692', '0.6922',
                     '0.6918', '0.6916', '0.6915', '0.6916', '0.6921', '0.6923',
                     '0.6919', '0.6918', '0.692', '0.6917', '0.6915', '0.6914',
                     '0.6915', '0.6929', '0.6926', '0.6925', '0.6927', '0.6923',
                     '0.6921', '0.692', '0.6921', '0.6923', '0.6922', '0.6924',
                     '0.6921', '0.6919', '0.6918', '0.6919', '0.6928', '0.693',
                     '0.6926', '0.6925', '0.6924', '0.6924', '0.6928', '0.6925',
                     '0.6923', '0.6922', '0.6923', '0.6924', '0.6923', '0.6922',
                     '0.6923', '0.6926', '0.6925', '0.6926', '0.6926', '0.6927',
                     '0.6928'], dtype=np.float32)
mae_100k = np.array(['0.7311', '0.7311', '0.7311', '0.7311', '0.731', '0.731', '0.7311',
                     '0.7312', '0.7308', '0.7309', '0.7308', '0.7308', '0.7308',
                     '0.7313', '0.7312', '0.7308', '0.7311', '0.7312', '0.7316',
                     '0.7316', '0.7322', '0.7324', '0.7325', '0.732', '0.7317',
                     '0.7326', '0.7335', '0.7344', '0.7344', '0.7342', '0.7342',
                     '0.7337', '0.7338', '0.7339', '0.734', '0.734', '0.734', '0.734',
                     '0.734', '0.734', '0.7311', '0.7311', '0.7311', '0.731', '0.731',
                     '0.7311', '0.7312', '0.7308', '0.7309', '0.7308', '0.7308',
                     '0.7308', '0.7313', '0.7312', '0.7308', '0.7311', '0.7312',
                     '0.7316', '0.7316', '0.7322', '0.7324', '0.7325', '0.732',
                     '0.7317', '0.7326', '0.7335', '0.7344', '0.7344', '0.7342',
                     '0.7342', '0.7337', '0.7338', '0.7339', '0.734', '0.734', '0.734',
                     '0.734', '0.734', '0.734', '0.7311', '0.7311', '0.731', '0.731',
                     '0.7311', '0.7312', '0.7308', '0.7309', '0.7308', '0.7308',
                     '0.7308', '0.7313', '0.7312', '0.7308', '0.7311', '0.7312',
                     '0.7316', '0.7316', '0.7322', '0.7324', '0.7325', '0.732',
                     '0.7317', '0.7326', '0.7335', '0.7344', '0.7344', '0.7342',
                     '0.7342', '0.7337', '0.7338', '0.7339', '0.734', '0.734', '0.734',
                     '0.734', '0.734', '0.734', '0.7311', '0.731', '0.731', '0.7311',
                     '0.7312', '0.7308', '0.7309', '0.7308', '0.7308', '0.7308',
                     '0.7313', '0.7312', '0.7308', '0.7311', '0.7312', '0.7316',
                     '0.7316', '0.7322', '0.7324', '0.7325', '0.732', '0.7317',
                     '0.7326', '0.7335', '0.7344', '0.7344', '0.7342', '0.7342',
                     '0.7337', '0.7338', '0.7339', '0.734', '0.734', '0.734', '0.734',
                     '0.734', '0.734', '0.731', '0.731', '0.7311', '0.7312', '0.7308',
                     '0.7309', '0.7308', '0.7308', '0.7308', '0.7312', '0.7311',
                     '0.7308', '0.7311', '0.7311', '0.7316', '0.7316', '0.7321',
                     '0.7323', '0.7324', '0.732', '0.7316', '0.7326', '0.7335',
                     '0.7344', '0.7343', '0.7342', '0.7342', '0.7336', '0.7337',
                     '0.7338', '0.734', '0.734', '0.734', '0.734', '0.734', '0.734',
                     '0.7311', '0.7312', '0.7313', '0.7309', '0.731', '0.7309',
                     '0.7309', '0.7309', '0.7313', '0.7312', '0.7309', '0.7312',
                     '0.7312', '0.7317', '0.7317', '0.7322', '0.7324', '0.7325',
                     '0.7321', '0.7317', '0.7327', '0.7336', '0.7345', '0.7345',
                     '0.7343', '0.7343', '0.7338', '0.7338', '0.7339', '0.7341',
                     '0.7341', '0.7341', '0.7341', '0.7341', '0.7341', '0.7312',
                     '0.7313', '0.7309', '0.731', '0.7309', '0.7309', '0.7309',
                     '0.7313', '0.7312', '0.7309', '0.7312', '0.7312', '0.7317',
                     '0.7317', '0.7322', '0.7324', '0.7325', '0.7321', '0.7317',
                     '0.7327', '0.7336', '0.7345', '0.7345', '0.7343', '0.7343',
                     '0.7338', '0.7338', '0.7339', '0.7341', '0.7341', '0.7341',
                     '0.7341', '0.7341', '0.7341', '0.7312', '0.7308', '0.7309',
                     '0.7308', '0.7308', '0.7308', '0.7312', '0.7311', '0.7308',
                     '0.7311', '0.7311', '0.7316', '0.7316', '0.7321', '0.7323',
                     '0.7324', '0.732', '0.7317', '0.7326', '0.7335', '0.7344',
                     '0.7344', '0.7342', '0.7342', '0.7337', '0.7337', '0.7338',
                     '0.734', '0.734', '0.734', '0.734', '0.734', '0.734', '0.7307',
                     '0.7308', '0.7307', '0.7307', '0.7307', '0.7311', '0.731',
                     '0.7307', '0.731', '0.731', '0.7315', '0.7315', '0.732', '0.7323',
                     '0.7323', '0.7319', '0.7316', '0.7325', '0.7334', '0.7343',
                     '0.7343', '0.7341', '0.7341', '0.7336', '0.7337', '0.7338',
                     '0.7339', '0.7339', '0.7339', '0.7339', '0.7339', '0.7339',
                     '0.7312', '0.7311', '0.731', '0.7311', '0.7315', '0.7314',
                     '0.7311', '0.7314', '0.7314', '0.7319', '0.7319', '0.7324',
                     '0.7326', '0.7327', '0.7323', '0.7319', '0.7329', '0.7338',
                     '0.7346', '0.7346', '0.7345', '0.7344', '0.7339', '0.734',
                     '0.7341', '0.7343', '0.7343', '0.7343', '0.7343', '0.7343',
                     '0.7343', '0.731', '0.731', '0.731', '0.7314', '0.7313', '0.731',
                     '0.7313', '0.7313', '0.7318', '0.7318', '0.7323', '0.7325',
                     '0.7326', '0.7322', '0.7318', '0.7328', '0.7337', '0.7346',
                     '0.7346', '0.7344', '0.7344', '0.7338', '0.7339', '0.734',
                     '0.7342', '0.7342', '0.7342', '0.7342', '0.7342', '0.7342',
                     '0.7311', '0.7311', '0.7315', '0.7314', '0.7311', '0.7314',
                     '0.7314', '0.7319', '0.7319', '0.7324', '0.7326', '0.7327',
                     '0.7323', '0.732', '0.7329', '0.7338', '0.7347', '0.7347',
                     '0.7345', '0.7345', '0.734', '0.734', '0.7341', '0.7343', '0.7343',
                     '0.7343', '0.7343', '0.7343', '0.7343', '0.7311', '0.7315',
                     '0.7314', '0.731', '0.7313', '0.7314', '0.7318', '0.7318',
                     '0.7324', '0.7326', '0.7327', '0.7322', '0.7319', '0.7328',
                     '0.7338', '0.7346', '0.7346', '0.7345', '0.7344', '0.7339',
                     '0.734', '0.7341', '0.7342', '0.7342', '0.7342', '0.7342',
                     '0.7342', '0.7342', '0.7315', '0.7314', '0.731', '0.7313',
                     '0.7314', '0.7318', '0.7318', '0.7324', '0.7326', '0.7327',
                     '0.7322', '0.7319', '0.7328', '0.7337', '0.7346', '0.7346',
                     '0.7344', '0.7344', '0.7339', '0.734', '0.7341', '0.7342',
                     '0.7342', '0.7342', '0.7342', '0.7342', '0.7342', '0.7309',
                     '0.7305', '0.7308', '0.7309', '0.7313', '0.7313', '0.7319',
                     '0.7321', '0.7322', '0.7317', '0.7314', '0.7323', '0.7333',
                     '0.7341', '0.7341', '0.7339', '0.7339', '0.7334', '0.7335',
                     '0.7336', '0.7337', '0.7337', '0.7337', '0.7337', '0.7337',
                     '0.7337', '0.7307', '0.731', '0.731', '0.7315', '0.7315', '0.732',
                     '0.7322', '0.7323', '0.7319', '0.7316', '0.7325', '0.7334',
                     '0.7343', '0.7343', '0.7341', '0.7341', '0.7336', '0.7336',
                     '0.7338', '0.7339', '0.7339', '0.7339', '0.7339', '0.7339',
                     '0.7339', '0.7314', '0.7314', '0.7319', '0.7319', '0.7324',
                     '0.7326', '0.7327', '0.7323', '0.7319', '0.7329', '0.7338',
                     '0.7347', '0.7346', '0.7345', '0.7345', '0.7339', '0.734',
                     '0.7341', '0.7343', '0.7343', '0.7343', '0.7343', '0.7343',
                     '0.7343', '0.7311', '0.7316', '0.7316', '0.7321', '0.7323',
                     '0.7324', '0.732', '0.7316', '0.7326', '0.7335', '0.7344',
                     '0.7344', '0.7342', '0.7342', '0.7337', '0.7337', '0.7338',
                     '0.734', '0.734', '0.734', '0.734', '0.734', '0.734', '0.7316',
                     '0.7316', '0.7321', '0.7323', '0.7324', '0.7319', '0.7316',
                     '0.7326', '0.7335', '0.7343', '0.7343', '0.7342', '0.7341',
                     '0.7336', '0.7337', '0.7338', '0.7339', '0.7339', '0.7339',
                     '0.7339', '0.7339', '0.7339', '0.7311', '0.7316', '0.7318',
                     '0.7319', '0.7315', '0.7311', '0.7321', '0.733', '0.7339',
                     '0.7338', '0.7337', '0.7337', '0.7331', '0.7332', '0.7333',
                     '0.7335', '0.7335', '0.7335', '0.7335', '0.7335', '0.7335',
                     '0.7311', '0.7313', '0.7314', '0.731', '0.7306', '0.7316',
                     '0.7325', '0.7334', '0.7334', '0.7332', '0.7332', '0.7327',
                     '0.7327', '0.7328', '0.733', '0.733', '0.733', '0.733', '0.733',
                     '0.733', '0.7313', '0.7314', '0.7309', '0.7306', '0.7315',
                     '0.7325', '0.7333', '0.7333', '0.7332', '0.7331', '0.7326',
                     '0.7327', '0.7328', '0.7329', '0.7329', '0.7329', '0.7329',
                     '0.7329', '0.7329', '0.7312', '0.7308', '0.7305', '0.7314',
                     '0.7323', '0.7332', '0.7332', '0.733', '0.733', '0.7325', '0.7325',
                     '0.7326', '0.7328', '0.7328', '0.7328', '0.7328', '0.7328',
                     '0.7328', '0.7306', '0.7303', '0.7313', '0.7322', '0.733', '0.733',
                     '0.7329', '0.7328', '0.7323', '0.7324', '0.7325', '0.7326',
                     '0.7326', '0.7326', '0.7326', '0.7326', '0.7326', '0.7308',
                     '0.7318', '0.7327', '0.7335', '0.7335', '0.7334', '0.7333',
                     '0.7328', '0.7329', '0.733', '0.7331', '0.7331', '0.7331',
                     '0.7331', '0.7331', '0.7331', '0.7319', '0.7328', '0.7336',
                     '0.7336', '0.7335', '0.7334', '0.7329', '0.733', '0.7331',
                     '0.7332', '0.7332', '0.7332', '0.7332', '0.7332', '0.7332',
                     '0.7319', '0.7328', '0.7328', '0.7326', '0.7326', '0.7321',
                     '0.7321', '0.7323', '0.7324', '0.7324', '0.7324', '0.7324',
                     '0.7324', '0.7324', '0.7319', '0.7319', '0.7317', '0.7317',
                     '0.7312', '0.7312', '0.7313', '0.7315', '0.7315', '0.7315',
                     '0.7315', '0.7315', '0.7315', '0.7311', '0.7309', '0.7309',
                     '0.7304', '0.7305', '0.7306', '0.7307', '0.7307', '0.7307',
                     '0.7307', '0.7307', '0.7307', '0.7309', '0.7308', '0.7303',
                     '0.7304', '0.7305', '0.7307', '0.7307', '0.7307', '0.7307',
                     '0.7307', '0.7307', '0.7308', '0.7303', '0.7304', '0.7305',
                     '0.7307', '0.7307', '0.7307', '0.7307', '0.7307', '0.7307',
                     '0.7306', '0.7306', '0.7307', '0.7309', '0.7309', '0.7309',
                     '0.7309', '0.7309', '0.7309', '0.7312', '0.7313', '0.7314',
                     '0.7314', '0.7314', '0.7314', '0.7314', '0.7314', '0.7312',
                     '0.7313', '0.7313', '0.7313', '0.7313', '0.7313', '0.7313',
                     '0.7312', '0.7312', '0.7312', '0.7312', '0.7312', '0.7312',
                     '0.7311', '0.7311', '0.7311', '0.7311', '0.7311', '0.7311',
                     '0.7311', '0.7311', '0.7311', '0.7311', '0.7311', '0.7311',
                     '0.7311', '0.7311', '0.7311'], dtype=np.float32)
grid_r1, grid_r2 = np.meshgrid(np.linspace(1, 5, 100), np.linspace(1, 5, 100))

# 插值
grid_mae_ciao = griddata((r1, r2), mae_ciao, (grid_r1, grid_r2), method='cubic')
grid_mae_100k = griddata((r1, r2), mae_100k, (grid_r1, grid_r2), method='cubic')
# 创建图形对象
fig = plt.figure(figsize=(12, 6))

# 第一个三维图
ax1 = fig.add_subplot(121, projection='3d')
surf1 = ax1.plot_surface(grid_r1, grid_r2, grid_mae_ciao, cmap='viridis')
cbar1 = fig.colorbar(surf1, ax=ax1, shrink=0.5, pad=0.12)
ax1.text2D(0.95, 0.95, "Ciao", transform=ax1.transAxes, ha='right', va='top')
ax1.set_xlabel('$r_α$')
ax1.set_ylabel('$r_β$')
ax1.set_zlabel('MAE', rotation=90)

# 第二个三维图
ax2 = fig.add_subplot(122, projection='3d')
surf2 = ax2.plot_surface(grid_r1, grid_r2, grid_mae_100k, cmap='plasma')
cbar2 = fig.colorbar(surf2, ax=ax2, shrink=0.5, pad=0.12)
ax2.text2D(0.95, 0.95, "Moivelens 100k", transform=ax2.transAxes, ha='right', va='top')
ax2.set_xlabel('$r_α$')
ax2.set_ylabel('$r_β$')
ax2.set_zlabel('MAE', rotation=90)

# 显示图形
plt.show()


# 创建一个2x2的figure
fig, axes = plt.subplots(2, 2, figsize=(10, 10))  # 创建 2x2 的子图

# 第一张图：整体用户评分
ax = axes[0, 0]  # 左上角
df_rating['rating'].value_counts(normalize=True).sort_index().plot(kind='bar', ax=ax)
ax.set_xlabel('用户评分', fontproperties=chinese_font)  # 设置x轴标签名称
ax.set_ylabel('比例', fontproperties=chinese_font)  # 设置y轴标签名称
ax.set_xticks(ax.get_xticks())
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)  # 调整x轴标签旋转角度

# 第二到第四张图：按类别用户评分
for idx, i in enumerate([2, 3, 5], start=1):
    tmp = df_rating[df_rating['user_cat'] == i]['rating'].value_counts(normalize=True).sort_index()
    if tmp.__len__() == 0:
        continue
    ax = axes[idx // 2, idx % 2]  # 分配子图位置
    tmp.plot(kind='bar', ax=ax)
    ax.set_xlabel(f'用户评分', fontproperties=chinese_font)  # 设置x轴标签名称
    ax.set_ylabel('比例', fontproperties=chinese_font)  # 设置y轴标签名称
    ax.set_xticks(ax.get_xticks())
    ax.set_xticklabels(ax.get_xticklabels(), rotation=0)  # 调整x轴标签旋转角度

# 调整布局以防止标签重叠
plt.tight_layout()
# 显示总图
plt.show()

# 创建一个2x2的figure
fig, axes = plt.subplots(2, 2, figsize=(12, 10))  # 增加图的尺寸，使图表看起来更宽敞

# 第一张图：整体用户评分偏差
ax = axes[0, 0]  # 左上角
df_rating['rating_diff'].value_counts(normalize=True).sort_index().plot(kind='bar', ax=ax, width=0.8)
ax.set_xlabel('用户评分偏差diff', fontproperties=chinese_font)  # 设置x轴标签名称
ax.set_ylabel('比例', fontproperties=chinese_font)  # 设置y轴标签名称
ax.set_xticks(ax.get_xticks()[::11])
ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha="right")  # 调整x轴标签旋转角度并对齐

# 第二到第四张图：按类别用户评分
full_diff_index = pd.Index(np.round(np.linspace(-4, 4, 81), 1))
prior_C = df = pd.DataFrame(0, index=range(1, 10), columns=full_diff_index)
for user_cat in range(1, 10):
    train = df_rating[df_rating['user_cat'] == user_cat]
    r = train['rating'].value_counts(normalize=True).sort_index()
    u_bar = round(train['user_avg_rating'], 1).value_counts(). \
        reindex(np.round(np.linspace(1, 5, 41), 1), fill_value=0).sort_index()
    u_bar = data_rolling(u_bar, 10)  # 平滑处理
    u_bar = u_bar / u_bar.sum()  # 归一化后验概率密度
    for i in u_bar.index:
        for j in r.index:
            prior_C.loc[user_cat, round(j - i, 1)] += u_bar.loc[i] * r.loc[j] * 41 * 5
for idx, i in enumerate([4, 6, 7], start=1):
    tmp = prior_C.iloc[i]
    if tmp.__len__() == 0:
        continue
    ax = axes[idx // 2, idx % 2]  # 分配子图位置
    tmp.plot(kind='bar', ax=ax, width=0.8)  # 设置条形图颜色
    ax.set_xlabel(f'用户评分偏差diff', fontproperties=chinese_font)  # 设置x轴标签名称
    ax.set_ylabel('概率', fontproperties=chinese_font)  # 设置y轴标签名称
    ax.set_xticks(ax.get_xticks()[::11])
    ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha="right")  # 调整x轴标签旋转角度并对齐

# 调整布局以防止标签重叠
plt.tight_layout()

# 显示总图
plt.show()

# 幂律分布图
fig, axs = plt.subplots(1, 2, figsize=(12, 6))

# 第一个图：普通的折线图
df_rating[['item_id', 'item_degree']].drop_duplicates()['item_degree'].value_counts().sort_index().plot(kind='line', ax=axs[0])
axs[0].set_xlabel('商品的度K', fontproperties=chinese_font)
axs[0].set_ylabel('商品数量', fontproperties=chinese_font)

# 第二个图：对数-对数图
axs[1].loglog(df_rating[['item_id', 'item_degree']].drop_duplicates()['item_degree'].value_counts().sort_index(), base=10)
axs[1].set_xlabel('商品的度K(对数)', fontproperties=chinese_font)
axs[1].set_ylabel('商品数量(对数)', fontproperties=chinese_font)

# 调整布局并显示图形
plt.tight_layout()
plt.show()


# Diversity and Novelty
N = [5, 10, 20, 50]
Diversity_NBC = [0.6569, 0.7921, 0.8766, 0.9484]
Diversity_UC_NBC = [0.7089, 0.8373, 0.9097, 0.9573]
Novelty_NBC = [0.0216, 0.0293, 0.1048, 0.2915]
Novelty_UC_NBC = [0.4044, 0.411, 0.4196, 0.4284]

# 创建子图
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))

# 绘制第一个子图 - Diversity
ax1.plot(N, Diversity_NBC, 'o-', label='NBC')
ax1.plot(N, Diversity_UC_NBC, 'o-', label='UC-NBC', color='orange')
ax1.set_title('Diversity Avg @N')
ax1.set_xlabel('N (推荐数量)',  fontproperties=chinese_font)
ax1.set_ylabel('Diversity Avg')
ax1.legend()

# 绘制第二个子图 - Novelty
ax2.plot(N, Novelty_NBC, 'o-', label='NBC')
ax2.plot(N, Novelty_UC_NBC, 'o-', label='UC-NBC', color='orange')
ax2.set_title('Novelty Avg @N')
ax2.set_xlabel('N (推荐数量)',  fontproperties=chinese_font)
ax2.set_ylabel('Novelty Avg')
ax2.legend()

# 显示图表
plt.tight_layout()
plt.show()
